// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	goka "github.com/lovoo/goka"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// GokaContext is an autogenerated mock type for the GokaContext type
type GokaContext struct {
	mock.Mock
}

// Context provides a mock function with given fields:
func (_m *GokaContext) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// DeferCommit provides a mock function with given fields:
func (_m *GokaContext) DeferCommit() func(error) {
	ret := _m.Called()

	var r0 func(error)
	if rf, ok := ret.Get(0).(func() func(error)); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(error))
		}
	}

	return r0
}

// Delete provides a mock function with given fields: options
func (_m *GokaContext) Delete(options ...goka.ContextOption) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Emit provides a mock function with given fields: topic, key, value, options
func (_m *GokaContext) Emit(topic goka.Stream, key string, value interface{}, options ...goka.ContextOption) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic, key, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Fail provides a mock function with given fields: err
func (_m *GokaContext) Fail(err error) {
	_m.Called(err)
}

// Group provides a mock function with given fields:
func (_m *GokaContext) Group() goka.Group {
	ret := _m.Called()

	var r0 goka.Group
	if rf, ok := ret.Get(0).(func() goka.Group); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(goka.Group)
	}

	return r0
}

// Headers provides a mock function with given fields:
func (_m *GokaContext) Headers() goka.Headers {
	ret := _m.Called()

	var r0 goka.Headers
	if rf, ok := ret.Get(0).(func() goka.Headers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(goka.Headers)
		}
	}

	return r0
}

// Join provides a mock function with given fields: topic
func (_m *GokaContext) Join(topic goka.Table) interface{} {
	ret := _m.Called(topic)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(goka.Table) interface{}); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Key provides a mock function with given fields:
func (_m *GokaContext) Key() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Lookup provides a mock function with given fields: topic, key
func (_m *GokaContext) Lookup(topic goka.Table, key string) interface{} {
	ret := _m.Called(topic, key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(goka.Table, string) interface{}); ok {
		r0 = rf(topic, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Loopback provides a mock function with given fields: key, value, options
func (_m *GokaContext) Loopback(key string, value interface{}, options ...goka.ContextOption) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Offset provides a mock function with given fields:
func (_m *GokaContext) Offset() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Partition provides a mock function with given fields:
func (_m *GokaContext) Partition() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// SetValue provides a mock function with given fields: value, options
func (_m *GokaContext) SetValue(value interface{}, options ...goka.ContextOption) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Timestamp provides a mock function with given fields:
func (_m *GokaContext) Timestamp() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Topic provides a mock function with given fields:
func (_m *GokaContext) Topic() goka.Stream {
	ret := _m.Called()

	var r0 goka.Stream
	if rf, ok := ret.Get(0).(func() goka.Stream); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(goka.Stream)
	}

	return r0
}

// Value provides a mock function with given fields:
func (_m *GokaContext) Value() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}
