// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	goka "github.com/lovoo/goka"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ijalalfrz/coinbit-test/model"

	response "github.com/ijalalfrz/coinbit-test/response"

	webmodel "github.com/ijalalfrz/coinbit-test/webmodel"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// AddBalance provides a mock function with given fields: ctx, payload
func (_m *Usecase) AddBalance(ctx goka.Context, payload *model.DepositWallet) response.Response {
	ret := _m.Called(ctx, payload)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(goka.Context, *model.DepositWallet) response.Response); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

// Deposit provides a mock function with given fields: ctx, payload
func (_m *Usecase) Deposit(ctx context.Context, payload webmodel.DepositWalletPayload) response.Response {
	ret := _m.Called(ctx, payload)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, webmodel.DepositWalletPayload) response.Response); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

// GetDetail provides a mock function with given fields: ctx, walletId
func (_m *Usecase) GetDetail(ctx context.Context, walletId string) response.Response {
	ret := _m.Called(ctx, walletId)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(context.Context, string) response.Response); ok {
		r0 = rf(ctx, walletId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}

// ProcessThreshold provides a mock function with given fields: ctx, payload
func (_m *Usecase) ProcessThreshold(ctx goka.Context, payload *model.DepositWallet) response.Response {
	ret := _m.Called(ctx, payload)

	var r0 response.Response
	if rf, ok := ret.Get(0).(func(goka.Context, *model.DepositWallet) response.Response); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(response.Response)
		}
	}

	return r0
}
